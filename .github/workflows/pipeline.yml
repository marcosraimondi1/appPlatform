name: Deployment Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize]

jobs:
  avoid_reduncy:
    runs-on: ubuntu-20.04
    steps:
     - name: Cancel Previous Redundant Builds
       # para no tener corriendo dos workflows al mismo tiempo del mismo repositorio
       uses: styfle/cancel-workflow-action@0.9.1
       with:
         access_token: ${{ github.token }}
  
  install:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0
     
      - uses: actions/setup-node@v2
        with:
          cache: 'npm' # ahorra tiempo al instalar una sola vez las dependencias
          cache-dependency-path: frontend/package-lock.json
          node-version: '14'
      
      -  name: Upgrade NPM
         run: npm install -g npm
        
      - name: Install Frontend Dependencies
        run: cd frontend && npm ci && cd ..

      - name: Install Backend Dependencies
        run: cd backend && npm ci && cd ..
  
  lint:
    needs: [install]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: 
          fetch-depth: 0
     
      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          node-version: '14'
      
      -  name: Upgrade NPM
         run: npm install -g npm
        
      - name: Install Frontend Dependencies
        run: cd frontend && npm ci && cd ..

      - name: Install Backend Dependencies
        run: cd backend && npm ci && cd ..
     
      - name: Lint
        run: cd frontend && npm run lint && cd ../backend && npm run lint && cd ..

  build:
    needs: [install]
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v2 
       # accion creada por github para copiar el repositorio en la maquina virtual donde se ejecuta la accion
       with:
        fetch-depth: 0
     
     - uses: actions/setup-node@v2
       with:
         cache: 'npm'
         cache-dependency-path: frontend/package-lock.json
         node-version: '14'
      
     -  name: Upgrade NPM
        run: npm install -g npm
     
     - name: Install Frontend Dependencies
       run: cd frontend && npm ci && cd ..
     
     - name: Set Frontend Env
       run: |
          cat > ./frontend/.env <<- EOM
          REACT_APP_API_BASE_URL=${{secrets.REACT_APP_API_BASE_URL}}
          EOM

     - name: Build
       run: cd frontend && npm run build && cd .. && rm ./backend/build -r &&  mv ./frontend/build ./backend
    
     - uses: actions/upload-artifact@v3
       with:
         name: build
         path: ./backend/build
  
  test:
    needs: [lint, build]
    runs-on: ubuntu-20.04
    steps:
     - uses: actions/checkout@v2 
       # accion creada por github para copiar el repositorio en la maquina virtual donde se ejecuta la accion
       with:
        fetch-depth: 0
     
     - uses: actions/setup-node@v2
       with:
         cache: 'npm'
         cache-dependency-path: frontend/package-lock.json
         node-version: '14'
      
     -  name: Upgrade NPM
        run: npm install -g npm

     - uses: actions/download-artifact@v2
       with:
         name: build
         path: ./backend/build
     
     - name: Install Backend Dependencies
       run: cd backend && npm ci && cd ..

     - name: Set Backend Env
       run: |
          cat > ./backend/.env <<- EOM
          NODE_ENV=${{secrets.NODE_ENV}}
          PORT=${{secrets.PORT}}
          INSTA_USERNAME=${{secrets.INSTA_USERNAME}}
          INSTA_PASSWORD=${{secrets.INSTA_PASSWORD}}
          SPOT_CLIENT_ID=${{secrets.SPOT_CLIENT_ID}}
          SPOT_CLIENT_SECRET=${{secrets.SPOT_CLIENT_SECRET}}
          SPOT_REDIRECT_URI=${{secrets.SPOT_REDIRECT_URI}}
          BASE_URL=${{secrets.BASE_URL}}
          GAPI_KEY=${{secrets.GAPI_KEY}}
          REACT_APP_API_BASE_URL=${{secrets.REACT_APP_API_BASE_URL}}
          EOM

     - name: Health Check
       run: |
         cd backend && (npm run start&) && cd .. && sleep 10 &&
         curl -X GET http://localhost:5000/api/health || exit 1
         

# deploy: configurar para cargar a aws automaticamente
  deploy:
    if: ${{github.event_name == 'push'}}
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2 
        # accion creada por github para copiar el repositorio en la maquina virtual donde se ejecuta la accion
        with:
         fetch-depth: 0
      
      - name: Decrypt Pem
        run: gpg --quiet --batch --yes --decrypt --passphrase="$KEY_PASSPHRASE" --output ./ServidorWeb.pem keys/ServidorWeb.pem.gpg
        env:
          KEY_PASSPHRASE: ${{ secrets.KEY_PASSPHRASE }}
      
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: ./backend/build
      
      - name: Set Backend Env
        run: |
          cat > ./backend/.env <<- EOM
          NODE_ENV=${{secrets.NODE_ENV}}
          PORT=${{secrets.PORT}}
          INSTA_USERNAME=${{secrets.INSTA_USERNAME}}
          INSTA_PASSWORD=${{secrets.INSTA_PASSWORD}}
          SPOT_CLIENT_ID=${{secrets.SPOT_CLIENT_ID}}
          SPOT_CLIENT_SECRET=${{secrets.SPOT_CLIENT_SECRET}}
          SPOT_REDIRECT_URI=${{secrets.SPOT_REDIRECT_URI}}
          BASE_URL=${{secrets.BASE_URL}}
          GAPI_KEY=${{secrets.GAPI_KEY}}
          REACT_APP_API_BASE_URL=${{secrets.REACT_APP_API_BASE_URL}}
          EOM
      - run: ls
        
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
          SOURCE: "./backend"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          EXCLUDE: "/node_modules/, /ffmpeg/"

      - name: run aws container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          password: ${{ secrets.SSH_KEY }}
          script: sudo echo "HELLO WORLD!" > $HOME/itsAlive.txt
          # script: sudo bash $HOME/webserver/scripts/deploy_containers.sh